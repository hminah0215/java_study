12월 20일 금요일 

<파일 순서>
1. ShapeTest (숙제였던것)
2. ChinaFood (부모클래스의 참조변수와 자식객체)
3. ShapeTest02 (instanceof)
4. FrameTest (창 만들기)
5.BirdTest (인터페이스와 다형성pdf , exercise 4번)
6. MyFrame
7.MyFrameTest
8.HashSetTest
9.LinkedHashSetTest
10.TreeSetTest
11. ArrayListTest
12.HashMap
13.LinkedHashMap
14.TreeMap
15.ArrayListTest02


===========================================================
<< 부모클래스의 참조변수와 자식객체 >>

부모클래스의 참조변수는 
	상속관계에 있는 자식 객체를 참조할 수 있어요.
	이때, 부모 클래스의 참조변수를 통해 
	메소드를 호출할때에
		만약 어떠한 메소드가
		부모클래스에도 있고 
		자식클래스에도 동일한 이름의 메소드가 있다면 
		(즉, 오버라이딩 한 메소드가 있다면)
		이 참조변수가 바라보는 객체를 평가하여 
		그 객체가 갖고있는(자식이 갖고있는)
		오버라이딩한 메소드가 호출되어요!! 

	그런데, 부모클래스에는 없고 자식클래스에서 추가 된 메소드를 
	호출하려면 그 자식 클래스의 자료형으로 형변환 후 호출할 수 있어요!
	
	이때, 특정 클래스형의 자료형인지 판별하여 
	형 변환할 필요가 있는데
	그때 사용하는 연산자가 
	instanceof 연산자 입니다. 

	if(a	instanceof	Shape){
		((Shape)a).calcArea();
	}


==========================================================

CUI	Character User Interface
GUI	Graphic User Interface

==========================================================
	공부할것 남은것들
문자열처리 
String
StringBuffer
예외처리
자바의 컬렉션프레임워크 (Set,List,Map)
자바의 유용한 클래스들 
파일처리 
네트워크 프로그래밍
데이터베이스 연결프로그래밍 
GUI 프로그래밍
===========================================================

자바의 컬렉션 프레임워크(Set, List, Map)

많은양의 자료처리를 위해서는 일반적으로 배열을 사용합니다. 
그러나 배열은 다음의 단점을 갖고있어요!
		1) 자료형이 동일한 것만 담을 수 있어요.
		2) 자료의 추가, 삭제가 번거로워요.

이러한 단점을 해결하기 위하여 컬렉션 프레임워크를 사용해요. 
컬렉션 프레임워크의 종류는 Set, List, Map 3가지가 있어요

Set		자료의 중복을 허용하지 않아요. 인덱스개념
List		자료의 중복을 허용해요. 인덱스개념
Map		key와 value가 한쌍으로 이루어진 자료구조  

Set, List, Map 모두 인터페이스 이며 
	이것들을 구현한 다양한 클래스들이 있어요! 

------------------------------------------------------------------------------------------------
Set

	데이터의 중복을 허용하지 않아요!
	HashSet			데이터의 입력 순서를 무시
	LinkedHashSet		데이터의 입력순서를 유지
	TreeSet			데이터의 크기에 따라 정렬 
------------------------------------------------------------------------------------------------
List
	데이터의 순서를 유지하고, 데이터의 중복을 허용
	둘다 사용법은 동일해요. 그러나 내부적으로 동작하는 방식이 다르다.
	(데이터의 중간에 추가하거나 삭제할때)

	ArrayList		
		만약 중간에 데이터를 추가하거나 삭제를 위해서는 
		새로운 배열을 잡고 일일이 자리이동을 합니다. 

	LinkedList
		자료마다 각 자료가 데이터(값)이외의 
		그 자료의 앞 데이터의 주소와 뒤에오는 데이터의 주소를 가지고 있기 때문에
		추가, 삭제 시에 관련있는 데이터의 주소만 변경해줌으로써 
		나머지 데이터들은 자리이동을 안해도 되요! 

		자료의 중간에 추가나 삭제를 하는 경우라면 
		ArrayList보다 훨씬 성능이 좋아요! 
		
----------------------------------------------------------------------------------------------------
Map
	HashMap

	LinkedHashMap

	TreeMap

