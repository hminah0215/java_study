<< 추상클래스와 추상메소드 >>
미래에 만들어질 자식클래스들이 가져야할 공통적인 속성과 동작을 뽑아서 
미리 부모클래스를 만들어요. 이때, 어떠한 메소드를 구체화 할 수가 없어요.
그러나 이메소드는 반드시 자식클래스들이 가져야하며, 오버라이딩 할 것을 
강제화 하고 싶어요. 이럴때 이러한 메소드에는 body를 구체화 하지 않고 메소드 선언만 하고 
추상메소드를 만들어요. 이때 메소드명앞에 추상 메소드임을 표시하기 위한 
abstract 이라는 키워드를 붙여요. 
이와 같이 어떤 클래스가 추상메소드를 하나라도 갖고 있다면 
그 클래스 자신이 추상 클래스가 되어야 해요! 

또, 추상클래스는 body가 구체화 되지 않은 메소드를 
갖고 있기때문에 객체를 생성할 수 없어요!!!!

===========================================================
<< equals method >>

기본자료형의 값이 서로 같은지 판별하기 위해서는 == 연산자를 사용합니다. 
그런데 만약, 참조 자료형에 == 연산자를 사용하게 되면 
	둘이 같은 메모리를 바라보는지 검사해요.
	두개의 객체가 서로 동일한 값을 가지고 있어도 
	false를 반환해요. 

	만약, 두개의 객체가 서로 동일한 속성값을 갖고 있는지 
	판별하려면 자바의 제일 조상인 Object equlas 를 나한테 맞게
	재정의 해요!!!! 

===========================================================

<< final >> 키워드는 
	멤버변수명앞에		값 변경금지(상수) 
	멤버메소드앞에		오버라이딩 금지
	클래스이름앞에		상속금지

===========================================================

<< interface >>
==>	자바는 클래스의 다중상속이 금지되어 있어요.
		다중상속의 효과를 기대할 목적으로 인터페이스를 사용해요.

class 클래스이름
{
	.......
}

interface 인터페이스이름
{
	
}

==> 인터페이스는 완전추상의 개념입니다. 
		인터페이스는 추상메소드와 상수만으로 구성되어야 해요!

		메소드이름앞에 메소드 선언부만 오고 abstract를 생략할 수 있다. 
		(굳이 abstract 안써도 된다는 소리, 기본이 그거임)

		변수명앞에 파이널을 안써도 기본이 final.

==========================================================

<< 부모클래스의 참조변수 >>

상속관계에 있을때 부모클래스의 참조변수는 
		자식객체를 생성하거나 
		참조할 수 있어요! 
		














final은 static과 같이 사용해요!!!!!!!